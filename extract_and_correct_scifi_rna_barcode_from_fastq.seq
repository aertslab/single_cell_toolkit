import bio
import sys

from bio.kmer import Kmer
from seq_lib.barcode_correction import (
    correct_bc_by_qual_order_with_whitelist_or_correct_bc_with_Ns_with_whitelist,
    read_barcode_whitelist_from_file
)
from seq_lib.utils import get_seq_and_qual_barcode_read


# Minimum percentage of barcodes that should be found before returning with an error.
min_frac_bcs_to_find_default = 0.5

# Reverse transcription whitelisted barcodes as a set of Kmers.
reverse_transcription_bc_whitelist = {
    k"AAGTGATTAGCAA", k"AGAATCCCCCTAA", k"ACCTGGGAAACTA", k"ATACCTCCCAGGA",
    k"AATTTGTGGTATA", k"ACCCGAGAGATCA", k"AGAGTATAGGGTA", k"ATCTTAATTGAGA",
    k"AACGTTCTGTCGA", k"ACATAATGGCGAA", k"AGGCCGGAACATA", k"ATCACTTCAAGAA",
    k"AAGCTGGCCTTCA", k"ACTGCACATTGGA", k"AGGTCCTTCGATA", k"ATTCGCACCCGAA",
    k"ACCGTAAATTACA", k"AGTAGTCGATATA", k"ATGTAAGAATCAA", k"AAGGCCCGCCGTA",
    k"ACTCCACGCAAGA", k"AGTCTTTGATTAA", k"ATAGAGCCCGCCA", k"AAGAAATGGAGGA",
    k"TCAGCGCTGGTTA", k"TGTTGACGAATAA", k"TTGCATCAGCGCA", k"TAGCCATATGAGA",
    k"TCCTGCCCCTGTA", k"TGGTATAAAACCA", k"TTAAAGTCATGCA", k"TAGAACTCAGAAA",
    k"TCAGCTTAATCGC", k"TGGCTTAAGAGAC", k"TTCACCTGTCGGC", k"TATAGTGATACTC",
    k"TCATCAGCGAACC", k"TGCGCCATGGGAC", k"TTGTTGAACTCCC", k"TATATACGCAGTC",
    k"TCGCACGACGTAC", k"TGGGACAGAAGGC", k"TTTAACAAGTATC", k"TACTCCTGGGTAC",
    k"TCAGAAAACCCCC", k"TGCACGAGCAGTC", k"TTATTATGCTTCC", k"TAGCGACTGTATC",
    k"CCCTTGCGACAGC", k"CGTTAGATTGCAC", k"CTAAATACCATCC", k"CATATTTTTTAGC",
    k"CCCCTAAACGCTC", k"CGATTGTTAGGAC", k"CTACCGAGTCTCC", k"CAGAACAAATTGC",
    k"CCTTGATCTCATC", k"CGCCACGCGTTAC", k"CTATAGATACGGC", k"CATACCCAGCCAC",
    k"CCCCGGATGTACC", k"CGATCTCGGCTTC", k"CTAGCCGCTTTGC", k"CCTAAATACAGCC",
    k"CGGGTTTTACCAG", k"CATATCCATTGCG", k"CCTCCCGAGAGTG", k"CGAATATCTCCGG",
    k"CTACTAACCCACG", k"CAAATGATACAAG", k"CCCCCATTATTTG", k"CGAGTCGCGACGG",
    k"GTGGTTGTGGCCG", k"GATTCAAGGAAAG", k"GCCAAGATCTGGG", k"GATACTGTATCAG",
    k"GCCGATTCGTGCG", k"GTGACAACGCTGG", k"GGGCTGTCTTATG", k"GACCCTGGCCTGG",
    k"GCGTACGCTTATG", k"GTTGCACTTAATG", k"GGACAAAGAGAAG", k"GAACCACAGCACG",
    k"GCTTATCTAGAGG", k"GTAATGTGGTCAG", k"GGCGCGCGAGCTG", k"GTCCATGTGTGTG",
    k"GGGAGGAATCCAG", k"GATCAAAATAGGG", k"GCAAGACTGCCAG", k"GTAGGATGGACCG",
    k"GGATCGGACCTAG", k"GCCCAAAGGAATG", k"GTACCTAACGCAG", k"GGTCAGGTTCAGG",
    k"AACCTCCAACCCA", k"ACGTTTCAGCCAA", k"ATAAGGTTAGATA", k"AATATACCAGACA",
    k"AGGAGAGACTGTA", k"ACTCATCTTAGCA", k"AAATTTGGCCGTA", k"ATTAAGGAAGTAA",
    k"AACCGATCCAGAA", k"ACAACGGGACTGA", k"ATCCAGTACAACA", k"AGAGGACGATGCA",
    k"AAAGGGTCGCTTA", k"ACCCATGTAGCAA", k"AGTGAAGTGGACA", k"ATAATAATTACAA",
    k"AGCTGTAACGTGA", k"AAAAAGCTGCGTA", k"ACGCGCAAACAGA", k"ATAATTTTCCCCA",
    k"AGGATACTGGTTA", k"AAGGGGGAAGCGA", k"ACAACGCCAAAAA", k"AACGAAGCCTGTA",
    k"TTACGTTGCCAGA", k"TAATTAACTTATA", k"TCTCGGTATGGGA", k"TTCGTGTGAATTA",
    k"TATAATTAGTTCA", k"TGGCTAATTCCTA", k"TAGAAGGTCGTGA", k"TCGTGAGGGGGTA",
    k"TTAGGCTAAAGGC", k"TGAAGTGGCTTCC", k"TATCGCATAGCGC", k"TCTCCTAAGCTCC",
    k"TAAATCATGATTC", k"TCGCATACGGAAC", k"TTGCAGCCACAGC", k"TACCTGGTGCTTC",
    k"TGTTTTCATAAGC", k"TAAACTGAGATGC", k"TCAGTGCGCTGTC", k"TTGAGTGGGCCAC",
    k"TATTCTCTCAACC", k"TCCTCCTTTACGC", k"TAGAGAACTTTAC", k"TTACTACCAGGTC",
    k"CATTGCTACATCC", k"CGGAGTCACACGC", k"CCGGTGGAGCTCC", k"CTTCGGCCCAATC",
    k"CACGAGACACCCC", k"CGTCTAGACAAAC", k"CACCGTACGTTGC", k"CCTAACCCTCTCC",
    k"CTAGATTTAACTC", k"CAGATTAGAGTAC", k"CGGGACGTTTTCC", k"CTATACCAAGAAC",
    k"CCGGCGAGCCAGC", k"CATTTGAAAACGC", k"CCCCTTTCTGGAC", k"CTGACTGCAGCGC",
    k"CACGATCAAGTTG", k"CGAAATGCTGACG", k"CGCTACCTGAAGG", k"CAGGAACTACACG",
    k"CTCGGCCGGTCAG", k"CTTTTCCAGCGTG", k"CAATCGTAGCCGG", k"CGTAAACTACGAG",
    k"GACGAGTATCTGG", k"GCAAAGGGTGGTG", k"GTAGGTGAGAAAG", k"GAGCGGATTAGTG",
    k"GGTTTGTATGTCG", k"GAACACATCTGAG", k"GCTACCAATGACG", k"GTGAGGGCTCGGG",
    k"GAAATGTGTCGCG", k"GGCCCACACCGGG", k"GCCGGTAGCTCCG", k"GAAGAATTATGGG",
    k"GTCTCGTCATATG", k"GGACTTTTGGTCG", k"GATTTCGTTCCAG", k"GTCCCGGAGCCAG",
    k"GGGGGGCCGGACG", k"GACTACGTTTGGG", k"GCTTTAATCTAAG", k"GAGGCAAAAATCG",
    k"GTTTGATTCTCGG", k"GAGGGACATCGAG", k"GGATCCTTACCCG", k"GCGATCCTCGCGG",
    k"ATATTGGCACTTA", k"AAAAGAATCGCCA", k"AGGAAGCCCATTA", k"ACCCCTTCGCAGA",
    k"ATGTCTATTCACA", k"AGAACGCTTTGAA", k"AAGGGACCCACCA", k"ACACATCGTTTTA",
    k"AATGGTTCTCCGA", k"ATGCCGCTGAAAA", k"AAACACTCTAGTA", k"ATCCTCGGGGTCA",
    k"AAGAATCGCTAGA", k"AGAAGTCAGGTAA", k"ACGCGGCTCATCA", k"AAACCCAAATATA",
    k"ATCTCAGAACTGA", k"AGCAATTAGGAGA", k"AAGTAAACGCGTA", k"ACATACAGCATGA",
    k"AACGCAGAGAGAA", k"ATGACGCGATTTA", k"AAACATTCACCAA", k"AGGCCTCATATTA",
    k"TGACGCTCACTGA", k"TCCGGGCGGAGCA", k"TTTCCCGTTTAAA", k"TGTAACTGAGTGA",
    k"TAACCTATGCCTA", k"TCCAAAGAACATA", k"TTCTCGGGTGACA", k"TGGTGTTGTTTTA",
    k"TAACCCGTAGTAC", k"TCTGCCTACTAAC", k"TTCAGTATTTATC", k"TGCTAGGGAAAAC",
    k"TAGTTACGAGGGC", k"TCGACCTAGGTTC", k"TGCCTCGATAGGC", k"TATTAGTCAAACC",
    k"TCTTACTGAACTC", k"TTCAATTGTGCAC", k"TGTACATGTCACC", k"TACGTATCATTAC",
    k"TCATGGACTCTGC", k"TTCATGCTCCATC", k"TGCTAACTCTGCC", k"TCCCTACTTCAAC",
    k"CAGTACTACGCGC", k"CTCACCGGCTATC", k"CACTATTTAATAC", k"CCGGACTTGCTGC",
    k"CTCACATCTTCCC", k"CGACCACCTGTAC", k"CATCAATCCCAGC", k"CCCAAGCAGGCCC",
    k"CTGTGCATAGTTC", k"CAACGCAGTCCAC", k"CGCGTTGGTAATC", k"CCTTCAGTAGGAC",
    k"CTAGCCTTCTGTC", k"CGTCCCACGAAGC", k"CTAGTTCCTATTC", k"CCCCAACCGGTGC",
    k"CTCTTAAAGATTG", k"CGGTCTCCTTGCG", k"CAATGAGCAGAGG", k"CCATATTCCCTTG",
    k"CTGTTACCCGTAG", k"CGATAATTTTCTG", k"CAACCTTGAGGGG", k"CCGATAAAACGCG",
    k"GCCTAGAGAGTTG", k"GGTCACCATGGAG", k"GCTGTGGCCCCGG", k"GTGGGAGGCGAAG",
    k"GGCTGCCGTCACG", k"GATCTTCTATGTG", k"GCTACTTGCTCTG", k"GTGGGCCTTTAGG",
    k"GGATACACCGGCG", k"GTGCGCTCGGATG", k"GCACAGGTCAAAG", k"GTCTGAGTGCCCG",
    k"GGTTGTGTAGCTG", k"GATGCGGGGCGGG", k"GCCGGTGTAAACG", k"GTGGCAAGTTCGG",
    k"GGTAGAATGAGTG", k"GCCCTATGGCCCG", k"GTCTATCCTCATG", k"GGAGTGTACTTGG",
    k"GATCGCGAGTACG", k"GCGGTCCCAAGTG", k"GTTCTGGGAGAGG", k"GAACTTCGAAAAG",
    k"AGCGTCCACACAA", k"ACGAGGTGCCGTA", k"ATTTATTAGACGA", k"AGGGCTCCGACAA",
    k"AAAGTTTATCAAA", k"ACACGTGTGCGGA", k"AACGTCAAGGATA", k"AGTGACAGCTACA",
    k"AAGCTTTACATGA", k"ATATGAACAACTA", k"AGTAGATCGCTAA", k"AAAGCGTCTACCA",
    k"ACATTTTTGAAGA", k"ATGTAGCTTACCA", k"AGTGAGCGGCAAA", k"AATGAGCCTGATA",
    k"ATCGAAACGAGGA", k"AGACAGTAGTCCA", k"ATTTAGCTCGGTA", k"AGCTTGAGGACCA",
    k"AACAGACGCCTAA", k"ATTGGACAGGGCA", k"AAAATTCAGTATA", k"ACTGTCGAAATAA",
    k"TTGGGTATCAGGA", k"TGCTATCAGTCTA", k"TAAGGCGGTAAGA", k"TCGATTGGGTTTA",
    k"TTGCCCAGCATAA", k"TGCACTGGGCGCA", k"TATGGGAATAAAA", k"TCTACCCGGTTGA",
    k"TCATCCAGATCAC", k"TGAAGCAATTAGC", k"TATGGCGTCCTTC", k"TCAATATATTGAC",
    k"TTTGGACGACCGC", k"TGATTGACCAAAC", k"TCGAACATACCTC", k"TTTCATCCAATAC",
    k"TGCGGGAAAGGCC", k"TCAGGGATCACTC", k"TGTGTTACTTCCC", k"TACGGGTGTTGAC",
    k"TCCTGATGGTAGC", k"TTTCGTGCTTTCC", k"TGACGCGACGATC", k"TATTGTTAACGAC",
    k"CCAAGCGCGTCCC", k"CTTATCGTCAAGC", k"CCTAGAAGTCGAC", k"CTCGGCATGATCC",
    k"CGACGGCGCACAC", k"CAGACCGTGGACC", k"CCAGGTGACGGCC", k"CTCGTGTCGGAGC",
    k"CTTTCGTGTAGAC", k"CGCCAGTGCTTTC", k"CATGTTGCGGGAC", k"CCGCTTGTATAGC",
    k"CTCGTCACTGGCC", k"CGCTTTTACTGAC", k"CAGCAGGGACGCC", k"CCCGCTCGACTAC",
    k"CTTCTGATTTTGG", k"CGATGTGCGTGTG", k"CACCCCGCTCCTG", k"CCAGATTGTAACG",
    k"CTGCTCCACCAAG", k"CGCGATATTCGGG", k"CACAGGGGCAACG", k"CCTCTGATCCGTG",
    k"GTCATTGACTTGG", k"GGGAAATCGTACG", k"GAACTTACTGCGG", k"GCGACGGATTAAG",
    k"GTTGCGATGTCCG", k"GGGATCGCACAGG", k"GACCAAATTGTAG", k"GCTGGTCAGTTTG",
    k"GGCCAAGGCGCCG", k"GATGTAAGTCTTG", k"GGGTGCTCCACAG", k"GCTGGTAGAGGTG",
    k"GGCAGATTCCAGG", k"GATGGTTGCAATG", k"GGCGGGTAGATAG", k"GCCACTCTTGGGG",
    k"GGTGAGGTATGTG", k"GAACGTTTATACG", k"GGTGCCGCCAGCG", k"GCGCGTTACTCAG",
    k"GTGATTGATGGAG", k"GGTTACGGGCCGG", k"GACCAGCATACAG", k"GCGAGTTTAATGG",
}


def correct_reverse_transcription_and_10x_atac_bc_from_fastq(
    reverse_transcription_bc_whitelist: set[Kmer[13]],
    tenx_atac_bc_whitelist: set[Kmer[16]],
    fastq_with_raw_bc_filename: str,
    fastq_with_corrected_bc_filename: str,
    corrected_bc_stats_tsv_filename: str,
    max_hamming_dist: int = 1,
    min_frac_bcs_to_find: float = min_frac_bcs_to_find_default,
):
    """
    Read scifi-RNA artifical BC FASTQ file with 13 bp reverse transcription barcode,
    16 bp 10x ATAC barcode and 8 bp UMI, correct reverse transcription barcode and
    10x ATAC barcode and write corrected reverse transcription barcode, corrected 10x
    ATAC barcode and UMI to output BC FASTQ file.

    Parameters
    ----------
    reverse_transcription_bc_whitelist:
        Tagmentation barcode whitelist.
    tenx_atac_bc_whitelist:
        10x ATAC barcode whitelist.
    fastq_with_raw_bc_filename:
        Input FASTQ file with raw barcode reads, made from:
          - 13 bp reverse transcription barcode (from bp 9 of original R1 read)
          - 16 bp 10x ATAC barcode (original index 2 read)
          - 8 bp UMI (from bp 1 of original R1 read)
    fastq_with_corrected_bc_filename:
        Output FASTQ file with corrected (if possible) reverse transcription barcode,
        corrected (if possible) 10x ATAC barcode and UMI.
    corrected_bc_stats_tsv_filename:
        File with barcode correction statistics.
    max_hamming_dist:
        Maximum hamming distance allowed for the barcode to consider it a match with
        the whitelist. Default: 1.
    min_frac_bcs_to_find:
        Required minimum fraction of barcode reads that need to contain a barcode.
        Default: 0.5.

    Returns
    -------
    enough_bcs_found, frac_bcs_found

    """
    if max_hamming_dist > 3 or max_hamming_dist < 0:
        raise ValueError("Only hamming distances 0, 1, 2 and 3 are supported.")

    # Store number of reads in FASTQ file.
    total_reads = 0

    # Store per reverse transcription barcode the number of reads which have a
    # reverse transcription barcode with a hamming distance of 0, 1, 2 or 3 to
    # the reverse transcription barcodes whitelist.
    per_reverse_transcription_bc_mismatches_stats = {
        str(reverse_transcription_bc): [0 , 0, 0, 0]
        for reverse_transcription_bc in reverse_transcription_bc_whitelist
    }

    # Store per reverse transcription barcode the number of reads which also have
    # a 10x ATAC barcode and for which the 10x ATAC barcode has hamming distance
    # of 0, 1, 2 or 3 from the 10x ATAC barcodes whitelist.
    per_reverse_transcription_bc_and_with_10x_atac_bc_mismatches_stats = {
        str(reverse_transcription_bc): [0 , 0, 0, 0]
        for reverse_transcription_bc in reverse_transcription_bc_whitelist
    }

    # Store number of reads which have a 10x ATAC barcode with a hamming distance of
    # 0, 1, 2 or 3 to the 10x ATAC barcodes whitelist.
    tenx_atac_bc_mismatches_stats = [0 , 0, 0, 0]

    if fastq_with_corrected_bc_filename == "-":
        fastq_with_corrected_bc_filename = "/dev/stdout"

    with open(fastq_with_corrected_bc_filename, "w") as corrected_bc_fh:
        for record in bio.FASTQ(fastq_with_raw_bc_filename, gzip=True, validate=False, copy=True):
            total_reads += 1

            # Extract reverse transcription barcode sequence and quality.
            (reverse_transcription_bc_seq,
             reverse_transcription_bc_qual
             ) = get_seq_and_qual_barcode_read(
                fastq_record=record,
                seq_start=0,
                seq_end=13,
                auto_reverse_comp=False,  # Never reverse complement.
            )

            # Extract 10x ATAC barcode sequence and quality.
            (tenx_atac_bc_seq,
             tenx_atac_bc_qual
             ) = get_seq_and_qual_barcode_read(
                fastq_record=record,
                seq_start=13,
                seq_end=29,
                auto_reverse_comp=True,  # Reverse complement if needed based on the
                                         # sequencer (comes from index read 2).
            )

            # Extract UMI sequence and quality.
            (umi_seq,
             umi_qual
             ) = get_seq_and_qual_barcode_read(
                fastq_record=record,
                seq_start=29,
                seq_end=37,
                auto_reverse_comp=False,  # Never reverse complement.
            )

            corrected_reverse_transcription_bc = correct_bc_by_qual_order_with_whitelist_or_correct_bc_with_Ns_with_whitelist(
                bc_whitelist=reverse_transcription_bc_whitelist,
                bc_length=13,
                bc_seq=reverse_transcription_bc_seq,
                bc_qual=reverse_transcription_bc_qual,
                max_hamming_dist=max_hamming_dist,
            )

            corrected_10x_atac_bc = correct_bc_by_qual_order_with_whitelist_or_correct_bc_with_Ns_with_whitelist(
                bc_whitelist=tenx_atac_bc_whitelist,
                bc_length=16,
                bc_seq=tenx_atac_bc_seq,
                bc_qual=tenx_atac_bc_qual,
                max_hamming_dist=max_hamming_dist,
            )

            if corrected_reverse_transcription_bc:
                per_reverse_transcription_bc_mismatches_stats[corrected_reverse_transcription_bc.corrected_bc][
                    corrected_reverse_transcription_bc.hamming_dist
                ] += 1

            if corrected_10x_atac_bc:
                tenx_atac_bc_mismatches_stats[corrected_10x_atac_bc.hamming_dist] += 1

            if corrected_10x_atac_bc and corrected_reverse_transcription_bc:
                per_reverse_transcription_bc_and_with_10x_atac_bc_mismatches_stats[
                    corrected_reverse_transcription_bc.corrected_bc
                ][corrected_10x_atac_bc.hamming_dist] += 1

                # Write original FASTQ record name, corrected reverse transcription
                # barcode, corrected 10x ATAC barcode and UMI.
                corrected_bc_fh.write(
                    f"@{record.name}\n" +
                    f"{corrected_reverse_transcription_bc.corrected_bc}{corrected_10x_atac_bc.corrected_bc}{umi_seq}\n" +
                    f"+\n"
                    f"{reverse_transcription_bc_qual}{tenx_atac_bc_qual}{umi_qual}\n"
                )
            else:
                # Write original FASTQ record name, uncorrected reverse transcription
                # barcode, uncorrected 10x ATAC barcode and UMI.
                corrected_bc_fh.write(
                    f"@{record.name}\n" +
                    f"{reverse_transcription_bc_seq}{tenx_atac_bc_seq}{umi_seq}\n" +
                    f"+\n"
                    f"{reverse_transcription_bc_qual}{tenx_atac_bc_qual}{umi_qual}\n"
                )

    # Calculate number of reverse transcription barcodes found per reverse transcription barcode.
    per_reverse_transcription_bc_reads = {
        reverse_transcription_bc: sum(per_reverse_transcription_bc_mismatches_stats[reverse_transcription_bc])
        for reverse_transcription_bc in per_reverse_transcription_bc_mismatches_stats
    }

    # Calculate number of total reverse transcription barcodes found.
    reverse_transcription_bc_reads = sum(per_reverse_transcription_bc_reads.values())

    # Calculate number of total 10x ATAC barcodes found.
    tenx_atac_bc_reads = sum(tenx_atac_bc_mismatches_stats)

    # Calculate number of 10x ATAC barcodes found per reverse transcription barcode.
    per_reverse_transcription_bc_and_with_10x_atac_bc_reads = {
        reverse_transcription_bc: sum(per_reverse_transcription_bc_and_with_10x_atac_bc_mismatches_stats[reverse_transcription_bc])
        for reverse_transcription_bc in per_reverse_transcription_bc_and_with_10x_atac_bc_mismatches_stats
    }

    # Calculate number of total 10x ATAC barcodes found which also have a reverse
    # transcription barcode.
    reverse_transcription_bc_and_10x_atac_bc_reads = sum(
        per_reverse_transcription_bc_and_with_10x_atac_bc_reads.values()
    )

    reads_without_reverse_transcription_bc = total_reads - reverse_transcription_bc_reads
    reads_without_10x_atac_bc = total_reads - tenx_atac_bc_reads
    reads_without_both_reverse_transcription_bc_and_10x_atac_bc = total_reads - reverse_transcription_bc_and_10x_atac_bc_reads

    with open(corrected_bc_stats_tsv_filename, 'w') as corrected_bc_stats_tsv_fh:
        corrected_bc_stats_tsv_fh.write(
            f"reads\t{total_reads}\t100.00%\n" +
            f"reverse_transcription_bc_reads\t{reverse_transcription_bc_reads}\t" +
            f"{(reverse_transcription_bc_reads / total_reads * 100.0)}%\n" +
            f"10x_atac_bc_reads\t{tenx_atac_bc_reads}\t" +
            f"{(tenx_atac_bc_reads / total_reads * 100.0)}%\n" +
            f"reverse_transcription_bc_and_10x_atac_bc_reads\t{reverse_transcription_bc_and_10x_atac_bc_reads}\t" +
            f"{(reverse_transcription_bc_and_10x_atac_bc_reads / total_reads * 100.0)}%\n" +
            f"reads_without_reverse_transcription_bc\t{reads_without_reverse_transcription_bc}\t" +
            f"{(reads_without_reverse_transcription_bc / total_reads * 100.0)}%\n" +
            f"reads_without_10x_atac_bc\t{reads_without_10x_atac_bc}\t"
            f"{(reads_without_10x_atac_bc / total_reads * 100.0)}%\n" +
            f"reads_without_both_reverse_transcription_bc_and_10x_atac_bc\t" +
            f"{reads_without_both_reverse_transcription_bc_and_10x_atac_bc}\t" +
            f"{(reads_without_both_reverse_transcription_bc_and_10x_atac_bc / total_reads * 100.0)}%\n"
        )

        corrected_bc_stats_tsv_fh.write(
            f"\nreverse_transcription_bc\treads_with_reverse_transcription_bc\treads_with_reverse_transcription_bc_and_10x_atac_bc"
        )

        for i in range(0, max_hamming_dist + 1):
            corrected_bc_stats_tsv_fh.write(
                f"\treverse_transcription_bc_with_{i}_mismatches"
            )

        for i in range(0, max_hamming_dist + 1):
            corrected_bc_stats_tsv_fh.write(
                f"\t10x_atac_bc_with_{i}_mismatches"
            )

        corrected_bc_stats_tsv_fh.write("\n")

        for reverse_transcription_bc in sorted(per_reverse_transcription_bc_reads.keys()):
            corrected_bc_stats_tsv_fh.write(
                f"{reverse_transcription_bc}\t" +
                f"{per_reverse_transcription_bc_reads[reverse_transcription_bc]}\t" +
                f"{per_reverse_transcription_bc_and_with_10x_atac_bc_reads[reverse_transcription_bc]}"
            )

            for i in range(0, max_hamming_dist + 1):
                corrected_bc_stats_tsv_fh.write(
                    f"\t{per_reverse_transcription_bc_mismatches_stats[reverse_transcription_bc][i]}"
                )

            for i in range(0, max_hamming_dist + 1):
                corrected_bc_stats_tsv_fh.write(
                    f"\t{per_reverse_transcription_bc_and_with_10x_atac_bc_mismatches_stats[reverse_transcription_bc][i]}"
                )

            corrected_bc_stats_tsv_fh.write("\n")

    # Calculate fraction of reads which have both a tagmentation barcode
    # and a 10x ATAC barcode.
    frac_bcs_found = reverse_transcription_bc_and_10x_atac_bc_reads / total_reads

    # Are there enough reads that have both a tagmentation barcode
    # and a 10x ATAC barcode.
    enough_bcs_found = (frac_bcs_found >= min_frac_bcs_to_find)

    return enough_bcs_found, frac_bcs_found


def main():
    if len(sys.argv) < 6:
        print(
            f"Usage: seqc run -release {sys.argv[0]} " +
            "tenx_atac_bc_whitelist_filename fastq_with_raw_bc_file fastq_with_corrected_bc_file " +
            "corrected_bc_stats_file max_mismatches [min_frac_bcs_to_find]",
            file=sys.stderr,
        )
        sys.exit(1)
    else:
        tenx_atac_bc_whitelist_filename = sys.argv[1]
        fastq_with_raw_bc_filename = sys.argv[2]
        fastq_with_corrected_bc_filename = sys.argv[3]
        corrected_bc_stats_tsv_filename = sys.argv[4]
        max_mismatches = int(sys.argv[5])
        min_frac_bcs_to_find = float(sys.argv[6]) if len(sys.argv) == 7 else min_frac_bcs_to_find_default

        # Read 10x ATAC whitelisted barcodes from file and convert to a set of Kmers.
        tenx_atac_bc_whitelist = read_barcode_whitelist_from_file(
            bc_whitelist_filename=tenx_atac_bc_whitelist_filename,
            bc_length=16,
            bc_column_idx=0,
            warning=True,
        )

        # Read FASTQ with barcodes and write a FASTQ with corrected barcodes for barcodes
        # that match the whitelist closely enough, else write the original barcodes.
        enough_bcs_found, frac_bcs_found = correct_reverse_transcription_and_10x_atac_bc_from_fastq(
            reverse_transcription_bc_whitelist=reverse_transcription_bc_whitelist,
            tenx_atac_bc_whitelist=tenx_atac_bc_whitelist,
            fastq_with_raw_bc_filename=fastq_with_raw_bc_filename,
            fastq_with_corrected_bc_filename=fastq_with_corrected_bc_filename,
            corrected_bc_stats_tsv_filename=corrected_bc_stats_tsv_filename,
            max_hamming_dist=max_mismatches,
            min_frac_bcs_to_find=min_frac_bcs_to_find,
        )

        if not enough_bcs_found:
            print(
                f"Warning: Only {frac_bcs_found * 100.00}% of the reads have a barcode.",
                "         Check if you provided the correct barcode whitelist file.\n",
                sep="\n",
                file=sys.stderr,
            )
            sys.exit(1)


if __name__ == "__main__":
    main()
