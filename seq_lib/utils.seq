import bio
import gzip


def read_line_from_uncompressed_or_gzipped_file(filename: str) -> Generator[str]:
    """
    Yield line from uncompressed or gzip compressed file.

    """

    if filename.endswith(".gz"):
        with gzip.open(filename, "r") as fh:
            for line in fh:
                yield line
    else:
        with open(filename, "r") as fh:
            for line in fh:
                yield line


def is_index2_reverse_complemented(sequencing_machine_id: str) -> bool:
    """
    Check if based on sequencing machine ID if index 2 read is reverse complemented or
    not, if sequencing was done with Dual-Indexed Workflow on a Paired-End Flow Cell.

    Dual-index sequencing on a paired-end flow cell follows one of two workflows,
    depending on the system and software:
      - The forward strand workflow is performed on the NovaSeq 6000 with v1.0 reagent
        kits, MiniSeq with Rapid Reagent kits, MiSeq, HiSeq 2500, and HiSeq 2000.
      - The reverse complement workflow is performed on the iSeq 100, MiniSeq with
        Standard reagent kits, NextSeq Systems, NovaSeq 6000 with v1.5 reagent kits,
        HiSeq X, HiSeq 4000, and HiSeq 3000.

    https://support-docs.illumina.com/SHARE/IndexedSeq/indexed-sequencing.pdf

    """
    sequencing_machine_id_length = len(sequencing_machine_id)

    if sequencing_machine_id_length == 6:
        if sequencing_machine_id[0] in {"M", "C", "D"}:
            # MiSeq, HiSeq1500 or HiSeq2500.
            return False
        elif sequencing_machine_id[0] in {"J", "K", "E", "A"}:
            #  HiSeq3000, HiSeq4000, HiSeqX or NovaSeq6000 (v1.5 reagent kit).
            return True
    elif sequencing_machine_id_length == 7:
        if sequencing_machine_id[0:2] in {"VH"}:
            # NextSeq2000.
            return True
    elif sequencing_machine_id_length == 8:
        if sequencing_machine_id[0:2] in {"NB", "NS", "MN"}:
            # NextSeq500, NextSeq500, MiniSeq (Standard reagent kit).
            return True
    elif sequencing_machine_id_length == 9:
        if sequencing_machine_id[0:5] in {"HWI-M", "HWI-C", "HWI-D"}:
            # MiSeq, HiSeq1500 or HiSeq2500.
            return False

    raise ValueError(f"Unsupported sequencing machine ID: \"{sequencing_machine_id}\".")


# Sequencing machine ID to is_index2_reverse_complemented mapping cache.
seq_machine_id_to_is_i2_rev_comp: Dict[str, bool] = dict()

def get_seq_and_qual_barcode_read(
    fastq_record: bio.FASTQRecord,
    seq_start: int,
    seq_end: int,
    auto_reverse_comp: bool = True,
) -> Tuple[bio.seq, str]:
    """
    Get sequence and associated quality scores from the current FASTQ record,
    for the provided seq_start and seq_end values, reverse complemented if
    needed based on the sequencer used.

    Parameters
    ----------
    fastq_record:
        FASTQ record.
    seq_start:
        Start of sequence to extract (position included).
    seq_end:
        End of sequence to extract (position excluded).
    auto_reverse_comp:
        Automatically reverse complement if needed, based on the sequencer used.
        Set to True if the barcode reads come from index 2, else set to False.

    Returns
    -------
    seq, qual:
        Sub sequence of original FASTQ record and associated quality score,
        reverse complemented if needed based on the sequencer used.

    """
    seq: bio.seq
    qual: str

    if auto_reverse_comp:
        # Get sequencing machine ID from FASTQ read name (part before first colon).
        sequencing_machine_id = fastq_record.name[0:fastq_record.name.index(":")]

        is_bc_rev: bool

        # Check if the reverse complement for the barcode sequence needs to be generated
        # based on the sequencing machine ID. Check if the sequencing machine ID is in
        # the seq_machine_id_to_is_i2_rev_comp dict cache to avoid
        # calling is_index2_reverse_complemented() unconditionally.
        if sequencing_machine_id not in seq_machine_id_to_is_i2_rev_comp:
            is_bc_rev = is_index2_reverse_complemented(sequencing_machine_id)
            seq_machine_id_to_is_i2_rev_comp[sequencing_machine_id] = is_bc_rev
        else:
            is_bc_rev = seq_machine_id_to_is_i2_rev_comp[sequencing_machine_id]

        # Get sequence and quality for current FASTQ record (limited to seq_start and
        # seq_end region and reverse complemented, if necessary).
        seq, qual = (
            (~(fastq_record.seq[seq_start:seq_end]), fastq_record.qual[seq_start:seq_end][::-1])
            if is_bc_rev
            else (fastq_record.seq[seq_start:seq_end], fastq_record.qual[seq_start:seq_end])
        )
    else:
        seq , qual = (fastq_record.seq[seq_start:seq_end], fastq_record.qual[seq_start:seq_end])

    if len(seq) != (seq_end - seq_start):
        raise ValueError(
            f"Extracted sequence has a length of only {len(seq)} instead of " +
            f"{seq_end - seq_start}."
        )

    return seq, qual
