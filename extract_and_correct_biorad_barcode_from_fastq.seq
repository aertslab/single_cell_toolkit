from bio import *
import sys

from bio.kmer import Kmer

#
# Written in seq.
#
# Purpose: Extract barcodes from FASTQ file in BioRad design:
#   https://github.com/caleblareau/bap/wiki/Working-with-BioRad-data
#

# Barcoded read design:
#									
#    ATAC-v2.1	Bead-TTTTTTTUUUTTTTTAATGATACGGCGACCACCGAGATCTACACGCCTGTCCGCGGAAGCAGTGGTATCAACGCAGAGTACHHHHHHH[0-4]TATGCATGACHHHHHHHAGTCACTGAGHHHHHHHTGGTAGAGAGGGTG								
#									
#		BC1	Phase Block	Constant1	BC2	Constant2	BC3	Nextera A	ME
#		HHHHHHH	none/A/CG/GCC/NVGC	TATGCATGAC	HHHHHHH	AGTCACTGAG	HHHHHHH	TCGTCGGCAGCGTC	AGATGTGTATAAGAGACAG

# Adapter 1 and 2 in Kmer form.
adapter1_kmer = k"TATGCATGAC"
adapter2_kmer = k"AGTCACTGAG"
nexteraA_kmer = k"TCGTCGGCAGCGTC"
me_kmer = k"AGATGTGTATAAGAGACAG"
me_short_kmer = k"TAAGAGACAG"


bc1_length: int = 7
bc2_length: int = 7
bc3_length: int = 7
adapter1_length: int = 10
adapter2_length: int = 10
nexteraA_length: int = 14
me_length: int  = 19
me_short_length: int = 10

# Minimum read length before even trying to find adapters and barcodes.
min_read_length = bc1_length + 4 + adapter1_length + bc2_length + adapter2_length + bc3_length + nexteraA_length + me_length + 1


adapter1_kmer_type = Kmer[10]
adapter2_kmer_type = Kmer[10]
nexteraA_kmer_type = Kmer[14]
me_kmer_type = Kmer[19]
me_short_kmer_type = Kmer[10]
adapter1_1deletion_kmer_type = Kmer[9]
adapter2_1deletion_kmer_type = Kmer[9]
nexteraA_1deletion_kmer_type = Kmer[13]
me_1deletion_kmer_type = Kmer[18]
me_1insertion_kmer_type = Kmer[20]

# Specify barcode length of barcodes in the whitelist.
barcode_kmer_type = Kmer[7]


# All barcodes in Kmer form.
barcode_kmers = {
    # phase block length 0
    k"GGACGAC", k"GCAGTGT", k"GAGAGGT", k"GAACCGT", k"GGTTAGT", k"GCCTTTG", k"GATAGAC", k"GTGGTAG", k"GTAATAC", k"CGAGGTC", k"CATCAGT", k"CCAAGCT", k"CCTTAGG", k"CACGGAC", k"CAGGCGG", k"CCGAACC", k"CACTTCT", k"CTGGCAT", k"CGATTAC", k"TCGTTCT", k"TGCTACT", k"TTCCTCT", k"TACTTTC", k"TGAATCC", k"TAGTACC", k"TTATCAT", k"TGATTGT", k"TGGCAAC", k"TGTTTAG", k"AGTTTCT", k"ATGGTGT", k"ATTGCCT", k"ACTCAAT", k"AGACCAT", k"AGCGAAT", k"ACCTACC", k"AGATAGG", k"AAGGTTC", k"AGGCATG",
    # phase block length 1
    k"GTGGCGC", k"GGTCGTA", k"GTGTCCA", k"GAGGACA", k"GTCCTTC", k"GAGCGTG", k"GATCACC", k"GTTGATG", k"CATACGC", k"CTGCGCC", k"CGTAGCC", k"CGCGGCG", k"CATCTTA", k"CCAGTCA", k"CGTTTGA", k"CCACTTG", k"CTAACTC", k"CGAGTGG", k"TCCTGGC", k"TGACCGC", k"TAAGGTA", k"TCGCGCA", k"TCATACA", k"TAAGAGG", k"TGGAAGG", k"TCCGCTC", k"TAACGCC", k"TGCGTTG", k"TCGGATG", k"AGCCGCC", k"ACACGCG", k"ACTACGA", k"AATGGCC", k"ATGTTCC", k"ACGTTGG", k"AGACTTC", k"ATATAAC", k"ATAGTTG",
    # phase block length 2
    k"GCACAGC", k"GACAATA", k"GAATCAA", k"GCTCCAA", k"GCGTAGA", k"GGAAGTT", k"GGAGCCT", k"GAATATG", k"GGTTCAC", k"CTAGAGC", k"CGTGATA", k"CGCCTAA", k"CGATGCA", k"CTTGCGA", k"CCATAAT", k"CCTATGT", k"CGCGCTT", k"CCGCGAT", k"CGGCCAG", k"TTGAGGC", k"TTTCCTA", k"TCAGCAA", k"TCCTTAA", k"TGGACCA", k"TAGTGTT", k"TATACTT", k"TGTCGCT", k"TACGCAT", k"TTGTAAG", k"TGTAGTG", k"AGTAAGC", k"ATGAATA", k"AACGTAA", k"AATTCCA", k"AATGATT", k"AAGTTAT", k"ACAGCTT", k"AGCTGAG", k"ACAGTAC",
    # phase block length 3
    k"GGCAGGC", k"GCGCACG", k"GAGCTAA", k"GGTAACA", k"GCTAATT", k"GTCGGTT", k"GGTGTTT", k"GCGACTC", k"CTTACCG", k"CTATTCG", k"CTAAGAA", k"CACGCCA", k"CGGAGGA", k"CTTGTCC", k"CTCATTT", k"CGGATCT", k"CAGAATT", k"CGCAATC", k"TGCGAGC", k"TTAAGCG", k"TCTTGTA", k"TACCGAA", k"TTCTGCA", k"TCCAGTT", k"TGGCCTT", k"TCGGCGT", k"TCTGAAC", k"TCGACAG", k"AAGCAGC", k"ATTCACG", k"AAGTGCG", k"ATAGGCA", k"ATTCGTT", k"ACGTATT", k"ACCGGCT", k"AATTGGT", k"ATTATTC", k"AACGGTG",
    # phase block length 4
    k"GAGTTGC", k"GGCGGAA", k"GTTAGGA", k"GTGCATT", k"GCCTCGT", k"GCTTTAT", k"GTGTGTC", k"GGCGTCC", k"CTCTTGC", k"CGGCTGC", k"CGGTACG", k"CGTACAA", k"CACATGA", k"CCGGTTT", k"CGACACT", k"CCTCCTT", k"CATGTAT", k"CTTCATC", k"CAGAGAG", k"TATGTGC", k"TCAAGAC", k"TTGGTTA", k"TGGTGAA", k"TTACAGA", k"TGAGATT", k"TTTGGTC", k"TTGGACT", k"TTCGTAC", k"TGAGGAG", k"ACCATGC", k"AGAGACC", k"AGCAACG", k"ACGAGAA", k"AACCACA", k"AACTCTT", k"ATGAGCT", k"AGGACGT", k"AGGATAC"
}


barcode_6bp_seqs_to_7bp: dict[seq, str] = dict[seq, str]()

for barcode_7bp_kmer in barcode_kmers:
    barcode_7bp_str = str(barcode_7bp_kmer)
    for i in range(0, 7):
        barcode_6bp_seq = seq(barcode_7bp_str[0:i] + barcode_7bp_str[i+1:7])

        barcode_6bp_seqs_to_7bp[barcode_6bp_seq] = barcode_7bp_str


adapter1_1deletion_set: set[adapter1_1deletion_kmer_type] = set[adapter1_1deletion_kmer_type]()

adapter1_str = str(adapter1_kmer)
for i in range(0, adapter1_length):
    adapter1_1deletion_kmer = adapter1_1deletion_kmer_type(seq(adapter1_str[0:i] + adapter1_str[i+1:adapter1_length]))
    adapter1_1deletion_set.add(adapter1_1deletion_kmer)


adapter2_1deletion_set: set[adapter2_1deletion_kmer_type] = set[adapter2_1deletion_kmer_type]()

adapter2_str = str(adapter2_kmer)
for i in range(0, adapter2_length):
    adapter2_1deletion_kmer = adapter2_1deletion_kmer_type(seq(adapter1_str[0:i] + adapter2_str[i+1:adapter2_length]))
    adapter2_1deletion_set.add(adapter2_1deletion_kmer)


nexteraA_1deletion_set: set[nexteraA_1deletion_kmer_type] = set[nexteraA_1deletion_kmer_type]()

nexteraA_str = str(nexteraA_kmer)
for i in range(0, nexteraA_length):
    nexteraA_1deletion_kmer = nexteraA_1deletion_kmer_type(seq(nexteraA_str[0:i] + nexteraA_str[i+1:nexteraA_length]))
    nexteraA_1deletion_set.add(nexteraA_1deletion_kmer)


me_1deletion_set: set[me_1deletion_kmer_type] = set[me_1deletion_kmer_type]()
me_1insertion_set: set[me_1insertion_kmer_type] = set[me_1insertion_kmer_type]()

me_str = str(me_kmer)
for i in range(0, me_length):
    me_1deletion_kmer = me_1deletion_kmer_type(seq(me_str[0:i] + me_str[i+1:me_length]))
    me_1deletion_set.add(me_1deletion_kmer)

    for insertion_base in ("A", "C", "G", "T"):
        me_1insertion_kmer = me_1insertion_kmer_type(seq(me_str[0:i] + insertion_base + me_str[i:me_length]))
        me_1insertion_set.add(me_1insertion_kmer)



def neighbors(kmer):
    """
    Create kmers with hamming distance of 1.
    """

    for i in range(len(kmer)):
        for b in (k"A", k"C", k"G", k"T"):
            if kmer[i] != b:
                yield kmer |> base(i, b)


def match_or_one_mismatch(whitelist, adapter) -> int:
    """
    Check if provided adapter matches the whitelist (0 or 1 mismatch allowed).
    """

    if adapter in whitelist:
        # Exact match.
        return 0
    for neighbor in neighbors(adapter):
        if neighbor in whitelist:
            # Hamming neighbor in whitelist (distance = 1).
            return 1

    # No match.
    return -1



class BC_part_raw:
    seq: seq
    qual: str


@tuple
class BC_parts_raw:
    bc1_raw: BC_part_raw
    bc2_raw: BC_part_raw
    bc3_raw: BC_part_raw


@tuple
class AdaptersHammingDists:
    adapter1: int
    adapter2: int
    nexteraA: int
    me: int


@tuple
class ATAC_part:
    seq: seq
    qual: str


@tuple
class ParsedBCRead:
    found_all_adapters: bool
    bc_parts_raw: BC_parts_raw
    atac_part: ATAC_part
    phase_block_seq: seq
    phase_block_length: int
    adapters_hamming_dists: AdaptersHammingDists

    def bc_full_seq(self) -> str:
       return str(self.bc_parts_raw.bc1_raw.seq) + str(self.bc_parts_raw.bc2_raw.seq) + str(self.bc_parts_raw.bc3_raw.seq)	

    def bc_full_qual(self) -> str:
       return self.bc_parts_raw.bc1_raw.qual + self.bc_parts_raw.bc2_raw.qual + self.bc_parts_raw.bc3_raw.qual
	

not_found_all_adapters = ParsedBCRead(
    False,
    BC_parts_raw(
        BC_part_raw(s"", ""),
        BC_part_raw(s"", ""),
        BC_part_raw(s"", "")
    ),
    ATAC_part(s"", ""),
    s"",
    -1,
    AdaptersHammingDists(-1, -1, -1, -1)
)


def find_adapters(read: seq, qual: str) -> ParsedBCRead:
    read_length = len(read)

    if read_length <= min_read_length:
        # Read is too short to find adapters and barcodes.
        return not_found_all_adapters

    phase_block_length_to_seqs = {
        0: [s""], # Handle special
        1: [s"A"],
        2: [s"CG"],
        3: [s"GCC"],
        4: [s"AGC", s"CGC", s"GGC"] # Should match: NVGC (skip first nucleotide)
    }

    for phase_block_length in [0, 1, 2, 3, 4]:
        # Set current barcode lengths back to 7 on each iteration.
        current_bc1_length = bc1_length
        current_bc2_length = bc2_length
        current_bc3_length = bc3_length

        # Check for match of adapter 1 (3 mismatches allowed).
        adapter1_start = current_bc1_length + phase_block_length
        adapter1_end = adapter1_start + adapter1_length
        adapter1_seq_kmer = adapter1_kmer_type(
            read[adapter1_start:adapter1_end]
        )

        adapter1_hamming_dist = abs(adapter1_seq_kmer - adapter1_kmer)

        if adapter1_hamming_dist > 3:
            if phase_block_length == 0:
                # When there is no phase block, we check one position earlier in case the first
                # barcode is 6 bp instead of 7 bp. For other phase blocks we don't do this as
                # we have checked that possibility in the previous phase block iteration.
                #
                # Check for match of adapter 1 (3 mismatches allowed), but start one position earlier.
                # (To detect if barcode 1 only is 6 bp instead of 7.)
                adapter1_start -= 1
                adapter1_end -= 1
                adapter1_seq_kmer = adapter1_kmer_type(
                    read[adapter1_start:adapter1_end]
                )

                adapter1_hamming_dist = abs(adapter1_seq_kmer - adapter1_kmer)

                if adapter1_hamming_dist > 3:
                    # Check for one basepair deletion in adapter 1 (1 mismatch allowed).
                    adapter1_start += 1
                    adapter1_1deletion_seq_kmer = adapter1_1deletion_kmer_type(read[adapter1_start:adapter1_end])

                    adapter1_hamming_dist = match_or_one_mismatch(adapter1_1deletion_set, adapter1_1deletion_seq_kmer)

                    if adapter1_hamming_dist == -1:
                        # Go to next iteration of the phase block loop.
                        continue
                    else:
                        # Add one to account for the deletion mismatch.
                        adapter1_hamming_dist += 1

                # Barcode 1 is 6 bp instead of 7 bp.
                current_bc1_length -= 1
            else:
                # Check for one basepair deletion in adapter 1 (1 mismatch allowed).
                adapter1_end -= 1
                adapter1_1deletion_seq_kmer = adapter1_1deletion_kmer_type(read[adapter1_start:adapter1_end])

                adapter1_hamming_dist = match_or_one_mismatch(adapter1_1deletion_set, adapter1_1deletion_seq_kmer)

                if adapter1_hamming_dist == -1:
                    # Go to next iteration of the phase block loop.
                    continue
                else:
                    # Add one to account for the deletion mismatch.
                    adapter1_hamming_dist += 1


        # Check for match of adapter 2 (3 mismatches allowed).
        adapter2_start = adapter1_end + current_bc2_length
        adapter2_end = adapter2_start + adapter2_length
        adapter2_seq_kmer = adapter2_kmer_type(
            read[adapter2_start:adapter2_end]
        )

        adapter2_hamming_dist = abs(adapter2_seq_kmer - adapter2_kmer)

        if adapter2_hamming_dist > 3:
            # Check for match of adapter 2 (3 mismatches allowed), but start one position earlier.
            # (To detect if barcode 2 only is 6 bp instead of 7).
            adapter2_start -= 1
            adapter2_end -= 1
            adapter2_seq_kmer = adapter2_kmer_type(
                read[adapter2_start:adapter2_end]
            )

            adapter2_hamming_dist = abs(adapter2_seq_kmer - adapter2_kmer)

            if adapter2_hamming_dist > 3:
                # Check for one basepair deletion in adapter 2 (1 mismatch allowed).
                adapter2_start += 1
                adapter2_1deletion_seq_kmer = adapter2_1deletion_kmer_type(read[adapter2_start:adapter2_end])

                adapter2_hamming_dist = match_or_one_mismatch(adapter2_1deletion_set, adapter2_1deletion_seq_kmer)

                if adapter2_hamming_dist == -1:
                    # Go to next iteration of the phase block loop.
                    continue
                else:
                    # Add one to account for the deletion mismatch.
                    adapter2_hamming_dist += 1

                continue

            # Barcode 2 is 6 bp instead of 7 bp.
            current_bc2_length -= 1


        # Check for match of nextera A adapter (4 mismatches allowed).
        nexteraA_start = adapter2_end + current_bc3_length
        nexteraA_end = nexteraA_start + nexteraA_length
        nexteraA_seq_kmer = nexteraA_kmer_type(
            read[nexteraA_start:nexteraA_end]
        )

        nexteraA_hamming_dist = abs(nexteraA_seq_kmer - nexteraA_kmer)

        if nexteraA_hamming_dist > 4:
            # Check for match of nextera A adapter (4 mismatches allowed), but start one position earlier.
            # (To detect if barcode 3 only is 6 bp instead of 7.)
            nexteraA_start -= 1
            nexteraA_end -= 1
            nexteraA_seq_kmer = nexteraA_kmer_type(
                read[nexteraA_start:nexteraA_end]
            )

            nexteraA_hamming_dist = abs(nexteraA_seq_kmer - nexteraA_kmer)

            if nexteraA_hamming_dist > 4:
                # Check for one basepair deletion in nextera adapter (1 mismatch allowed).
                nexteraA_start += 1
                nexteraA_1deletion_seq_kmer = nexteraA_1deletion_kmer_type(read[nexteraA_start:nexteraA_end])

                nexteraA_hamming_dist = match_or_one_mismatch(nexteraA_1deletion_set, nexteraA_1deletion_seq_kmer)

                if nexteraA_hamming_dist == -1:
                    # Go to next iteration of the phase block loop.
                    continue
                else:
                    # Add one to account for the deletion mismatch.
                    nexteraA_hamming_dist += 1

            # Barcode 3 is 6 bp instead of 7 bp.
            current_bc3_length -= 1


        me_found = False
        me_start = nexteraA_end - 1
        me_end = me_start + me_length
        me_hamming_dist = -1

        # Check from end position of nextera A (minus one) for ME adapter, till the end of the read.
        for me_start in range(nexteraA_end - 1, read_length - me_length):
            # Check for match of ME adapter at the current position (3 mismatches allowed).
            me_end = me_start + me_length
            me_seq_kmer = me_kmer_type(
                read[me_start:me_end]
            )

            me_hamming_dist = abs(me_seq_kmer - me_kmer)

            if me_hamming_dist > 3:
                # Check for one basepair deletion in ME adapter (1 mismatch allowed).
                me_end -= 1
                me_1deletion_seq_kmer = me_1deletion_kmer_type(read[me_start:me_end])

                me_hamming_dist = match_or_one_mismatch(me_1deletion_set, me_1deletion_seq_kmer)

                if me_hamming_dist >= 0:
                   # Add one to account for the deletion mismatch.
                   me_hamming_dist += 1
                   me_found = True
                   break
                else:
                   # Check for one basepair insertion in ME adapter (1 mismatch allowed).
                   me_end += 2
                   me_1insertion_seq_kmer = me_1insertion_kmer_type(read[me_start:me_end])

                   me_hamming_dist = match_or_one_mismatch(me_1insertion_set, me_1insertion_seq_kmer)

                   if me_hamming_dist >= 0:
                       # Add one to account for the deletion mismatch.
                       me_hamming_dist += 1
                       me_found = True
                       break
                   else:
                       # Check shortened ME adapter (1 mismatch allowed).
                       me_end = me_start + me_short_length
                       me_short_seq_kmer = me_short_kmer_type(
                           read[me_start:me_end]
                       )

                       me_hamming_dist = match_or_one_mismatch(set([me_short_kmer]), me_short_seq_kmer)

                       if me_hamming_dist >= 0:
                           # Add some additional mismatches as we only matched for the last 10 base pairs.
                           me_hamming_dist += me_length - me_short_length
                           me_found = True
                           break
            else:
                me_found = True
                break

        if me_found == False:
            # Go to next iteration of the phase block loop.
            continue


        phase_block_seq_from_read = s""

        if phase_block_length > 0:
            phase_block_seq_from_read = read[current_bc1_length:current_bc1_length + phase_block_length]

        # Collect barcode 1, 2 and 3 sequences and associated quality scores.
        bc_parts_raw = BC_parts_raw(
            BC_part_raw(
                read[0:current_bc1_length],
                qual[0:current_bc1_length]
            ),
            BC_part_raw(
                read[adapter1_end:adapter1_end + current_bc2_length],
                qual[adapter1_end:adapter1_end + current_bc2_length]
            ),
            BC_part_raw(
                read[adapter2_end:adapter2_end + current_bc3_length],
                qual[adapter2_end:adapter2_end + current_bc3_length]
            )
        )

        # Extract ATAC part from the read.
        atac_part = ATAC_part(read[me_end:], qual[me_end:])

        return ParsedBCRead(
            True,
            bc_parts_raw,
            atac_part,
            phase_block_seq_from_read,
            phase_block_length,
            AdaptersHammingDists(
                adapter1_hamming_dist,
                adapter2_hamming_dist,
                nexteraA_hamming_dist,
                me_hamming_dist,
            )
        )

    # Return not found when not all adapters could be found in the read.
    return not_found_all_adapters


@tuple
class CorrectedBc:
    mismatch_dist: int
    corrected_bc: str


def correct_bc_with_whitelist(bc_whitelist: set[barcode_kmer_type], bc: barcode_kmer_type) -> CorrectedBc:
    """
    Check if provided barcode matches the whitelist (0 or 1 mismatch allowed).
    """

    if bc in bc_whitelist:
        # Exact match.
        return CorrectedBc(0, str(bc))
    for neighbor in neighbors(bc):
        if neighbor in bc_whitelist:
            # Hamming neighbor in whitelist (distance = 1).
            return CorrectedBc(1, str(neighbor))

    # No match.
    return CorrectedBc(-1, str(bc))


@tuple
class Barcodes:
    bc1_hamming_dist: int
    bc2_hamming_dist: int
    bc3_hamming_dist: int
    bc1: seq
    bc2: seq
    bc3: seq


def extract_and_correct_biorad_barcode_from_fastq(
    fastq_with_raw_bc_filename: str,
    fastq_with_corrected_bc_filename: str,
    corrected_bc_stats_tsv_filename: str,
):
    """
    Read FASTQ file with barcodes and append " CB:Z:corrected_barcode" to the FASTQ
    record comment if the barcode matches the whitelist (exact match or 1 mismatch).
    """

    if fastq_with_corrected_bc_filename == "-":
        fastq_with_corrected_bc_filename = "/dev/stdout"


    nbr_reads = 0
    nbr_reads_with_adapters_needed_to_find_bcs = 0

    # Keep track of number of reads that have a barcode part with >1 , 0 or 1 mismatch.
    nbr_reads_with_bcs = [
        # Barcode 1: more than 1 mismatch, 0 mismatches, 1 mismatch.
        [0, 0, 0],
        # Barcode 2: more than 1 mismatch, 0 mismatches, 1 mismatch.
        [0, 0, 0],
        # Barcode 3: more than 1 mismatch, 0 mismatches, 1 mismatch.
        [0, 0, 0],
    ]

    nbr_reads_with_bc1_bc2_bc3_correct_or_correctable = 0


    with open(fastq_with_corrected_bc_filename, "w") as fastq_with_corrected_bc_fh:
        for record in FASTQ(fastq_with_raw_bc_filename, gzip=True, validate=False, copy=True):
            nbr_reads += 1

            seq_without_Ns = seq(str(record.seq).replace("N", "A"))

            parsed_bc_read = find_adapters(seq_without_Ns, record.qual)

            if parsed_bc_read.found_all_adapters == False:
                # Add Biorad tag "br:Z:FoundNotAllAdapters" to read name comment and write ATAC sequence of Ns.
                fastq_with_corrected_bc_fh.write(f"@{record.name} br:Z:FoundNotAllAdapters\nNNNN\n+\nAAAA\n")
            else:
                nbr_reads_with_adapters_needed_to_find_bcs += 1

                corrected_bc1 = CorrectedBc(-1, "")
                corrected_bc2 = CorrectedBc(-1, "")
                corrected_bc3 = CorrectedBc(-1, "")

                # Get raw barcodes.
                if len(parsed_bc_read.bc_parts_raw.bc1_raw.seq) == 6:
                    bc1_6bp_seq = parsed_bc_read.bc_parts_raw.bc1_raw.seq

                    if bc1_6bp_seq in barcode_6bp_seqs_to_7bp:
                        corrected_bc1 = CorrectedBc(1, barcode_6bp_seqs_to_7bp[bc1_6bp_seq])
                    else:
                        corrected_bc1 = CorrectedBc(-1, str(bc1_6bp_seq))
                else:
                    bc1_kmer = Kmer[7](parsed_bc_read.bc_parts_raw.bc1_raw.seq)
                    corrected_bc1 = correct_bc_with_whitelist(barcode_kmers, bc1_kmer)

                if len(parsed_bc_read.bc_parts_raw.bc2_raw.seq) == 6:
                    bc2_6bp_seq = parsed_bc_read.bc_parts_raw.bc2_raw.seq

                    if bc2_6bp_seq in barcode_6bp_seqs_to_7bp:
                        corrected_bc2 = CorrectedBc(1, barcode_6bp_seqs_to_7bp[bc2_6bp_seq])
                    else:
                        corrected_bc2 = CorrectedBc(-1, str(bc2_6bp_seq))
                else:
                    bc2_kmer = Kmer[7](parsed_bc_read.bc_parts_raw.bc2_raw.seq)
                    corrected_bc2 = correct_bc_with_whitelist(barcode_kmers, bc2_kmer)

                if len(parsed_bc_read.bc_parts_raw.bc3_raw.seq) == 6:
                    bc3_6bp_seq = parsed_bc_read.bc_parts_raw.bc3_raw.seq

                    if bc3_6bp_seq in barcode_6bp_seqs_to_7bp:
                        corrected_bc3 = CorrectedBc(1, barcode_6bp_seqs_to_7bp[bc3_6bp_seq])
                    else:
                        corrected_bc3 = CorrectedBc(-1, str(bc3_6bp_seq))
                else:
                    bc3_kmer = Kmer[7](parsed_bc_read.bc_parts_raw.bc3_raw.seq)
                    corrected_bc3 = correct_bc_with_whitelist(barcode_kmers, bc3_kmer)

                # Collect statistics of barcode mismatches for each part of the barcode.
                # As more than 1 mismatch is indicated by -1, we put that one in index 0.
                nbr_reads_with_bcs[0][corrected_bc1.mismatch_dist + 1] += 1
                nbr_reads_with_bcs[1][corrected_bc2.mismatch_dist + 1] += 1
                nbr_reads_with_bcs[2][corrected_bc3.mismatch_dist + 1] += 1

                if corrected_bc1.mismatch_dist == -1 or corrected_bc2.mismatch_dist == -1 or corrected_bc3.mismatch_dist == -1:
                    # At least one of the barcode parts could not be corrected.
                    # Add Biorad tag "br:Z:" to read name comment with number of mismatches for each barcode part.
                    fastq_with_corrected_bc_fh.write(
                        f"@{record.name} " +
                        f"CR:Z:{parsed_bc_read.bc_full_seq()}\t" +
                        f"CY:Z:{parsed_bc_read.bc_full_qual()}\t" +
                        f"br:Z:{corrected_bc1.mismatch_dist}," +
                        f"{corrected_bc2.mismatch_dist}," +
                        f"{corrected_bc3.mismatch_dist}_{parsed_bc_read.adapters_hamming_dists.adapter1}," +
                        f"{parsed_bc_read.adapters_hamming_dists.adapter2}," +
                        f"{parsed_bc_read.adapters_hamming_dists.nexteraA}," +
                        f"{parsed_bc_read.adapters_hamming_dists.me}\n" +
                        f"{parsed_bc_read.atac_part.seq}\n+\n" +
                        f"{parsed_bc_read.atac_part.qual}\n"
                    )
                else:
                    nbr_reads_with_bc1_bc2_bc3_correct_or_correctable += 1

                    # Write the corrected barcode as CB tag in the FASTQ comment.
                    # Add Biorad tag "br:Z:" to read name comment with number of mismatches for each barcode part.
                    fastq_with_corrected_bc_fh.write(
                        f"@{record.name} " +
                        f"CR:Z:{parsed_bc_read.bc_full_seq()}\t" +
                        f"CY:Z:{parsed_bc_read.bc_full_qual()}\t" +
                        f"CB:Z:{corrected_bc1.corrected_bc}{corrected_bc2.corrected_bc}{corrected_bc3.corrected_bc}\t" +
                        f"br:Z:{corrected_bc1.mismatch_dist}," +
                        f"{corrected_bc2.mismatch_dist}," +
                        f"{corrected_bc3.mismatch_dist}_{parsed_bc_read.adapters_hamming_dists.adapter1}," +
                        f"{parsed_bc_read.adapters_hamming_dists.adapter2}," +
                        f"{parsed_bc_read.adapters_hamming_dists.nexteraA}," +
                        f"{parsed_bc_read.adapters_hamming_dists.me}\n" +
                        f"{parsed_bc_read.atac_part.seq}\n+\n" +
                        f"{parsed_bc_read.atac_part.qual}\n"
                    )

    with open(corrected_bc_stats_tsv_filename, "w") as corrected_bc_stats_tsv_fh:
        corrected_bc_stats_tsv_fh.write(
            f"nbr_reads:\t{nbr_reads}\n" +
            f"nbr_reads_with_adapters_needed_to_find_bcs\t{nbr_reads_with_adapters_needed_to_find_bcs}\n" +
            f"nbr_reads_with_bc1_0_mismatches\t\t{nbr_reads_with_bcs[0][1]}\n" +
            f"nbr_reads_with_bc1_1_mismatch\t\t{nbr_reads_with_bcs[0][2]}\n" +
            f"nbr_reads_with_bc1_uncorrectable\t\t{nbr_reads_with_bcs[0][0]}\n" +
            f"nbr_reads_with_bc2_0_mismatches\t\t{nbr_reads_with_bcs[1][1]}\n" +
            f"nbr_reads_with_bc2_1_mismatch\t\t{nbr_reads_with_bcs[1][2]}\n" +
            f"nbr_reads_with_bc2_uncorrectable\t\t{nbr_reads_with_bcs[1][0]}\n" +
            f"nbr_reads_with_bc3_0_mismatches\t\t{nbr_reads_with_bcs[2][1]}\n" +
            f"nbr_reads_with_bc3_1_mismatch\t\t{nbr_reads_with_bcs[2][2]}\n" +
            f"nbr_reads_with_bc3_uncorrectable\t\t{nbr_reads_with_bcs[2][0]}\n" +
            f"nbr_reads_with_bc1_bc2_bc3_correct_or_correctable\t{nbr_reads_with_bc1_bc2_bc3_correct_or_correctable}\n"
       )



if len(sys.argv) <= 3:
    sys.stderr.write(f"Usage: {sys.argv[0]} fastq_with_raw_bc_file fastq_with_corrected_bc_file corrected_bc_stats_file\n")
    sys.exit(1)
else:
    fastq_with_raw_bc_filename = sys.argv[1]
    fastq_with_corrected_bc_filename = sys.argv[2]
    corrected_bc_stats_tsv_filename = sys.argv[3]

    # Read FASTQ with barcodes and write a FASTQ with corrected barcodes for barcodes that
    # match the whitelist of barcodes closely enough, else write the original barcodes.
    extract_and_correct_biorad_barcode_from_fastq(fastq_with_raw_bc_filename, fastq_with_corrected_bc_filename, corrected_bc_stats_tsv_filename)
